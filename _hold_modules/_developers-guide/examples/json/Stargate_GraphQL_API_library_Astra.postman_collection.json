{
	"info": {
		"_postman_id": "52b194c9-b3e9-492a-8d50-762ad71084f9",
		"name": "Stargate GraphQL API: library (Astra)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create a keyspace called library",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation createKsLibrary {\n  createKeyspace(name:\"library\", replicas: 1)\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}{{base_api_schema_path}}",
					"host": [
						"{{base_url}}{{base_api_schema_path}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a user-defined type (UDT) called address",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation createAddressUDT {\n  createType(\n    keyspaceName: \"library\"\n    typeName: \"address_type\"\n    fields: [\n      { name: \"street\", type: { basic: TEXT } }\n      { name: \"city\", type: { basic: TEXT } }\n      { name: \"state\", type: { basic: TEXT } }\n      { name: \"zip\", type: { basic: TEXT } }\n    ]\n  )\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}{{base_api_schema_path}}",
					"host": [
						"{{base_url}}{{base_api_schema_path}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create 2 tables, book and reader",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation createTables {\n  book: createTable(\n    keyspaceName:\"library\",\n    tableName:\"book\",\n    partitionKeys: [ # The keys required to access your data\n      { name: \"title\", type: {basic: TEXT} }\n    ]\n    clusteringKeys: [\n      { name: \"author\", type: {basic: TEXT} }\n    ]\n  )\n  reader: createTable(\n    keyspaceName:\"library\",\n    tableName:\"reader\",\n    partitionKeys: [\n      { name: \"name\", type: {basic: TEXT} }\n    ]\n    clusteringKeys: [ # Secondary key used to access values within the partition\n      { name: \"user_id\", type: {basic: UUID}, order: \"ASC\" }\n        ]\n    values: [\n      { name: \"birthdate\", type: {basic: DATE} }\n      { name: \"email\", type: {basic: SET, info:{ subTypes: [ { basic: TEXT } ] } } }\n      { name: \"reviews\", type: {basic: TUPLE, info: { subTypes: [ { basic: TEXT }, { basic: INT }, { basic: DATE } ] } } }\n      { name: \"addresses\", type: { basic: LIST, info: { subTypes: [ { basic: UDT, info: { name: \"address_type\", frozen: true } } ] } } }\n    ]\n  )\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}{{base_api_schema_path}}",
					"host": [
						"{{base_url}{{base_api_schema_path}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create 2 tables, magazine and article, IF NOT EXISTS",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation createTableIfNotExists {\n  magazine: createTable(\n    keyspaceName:\"library\",\n    tableName:\"magazine\",\n    partitionKeys: [ # The keys required to access your data\n      { name: \"title\", type: {basic: TEXT} }\n    ]\n    clusteringKeys: [ # Secondary key used to access values within the partition\n      { name: \"pub_yr\", type: {basic: INT}, order: \"ASC\" }\n      { name: \"pub_mon\", type: {basic: INT} }\n      { name: \"mag_id\", type: {basic: INT} }\n    ],\n    ifNotExists: true,\n    values: [ # The values associated with the keys\n      { name: \"editor\", type: {basic: TEXT} }\n    ]\n  )\n  article: createTable(\n    keyspaceName:\"library\",\n    tableName:\"article\",\n    partitionKeys: [ # The keys required to access your data\n      { name: \"title\", type: {basic: TEXT} }\n    ]\n    clusteringKeys: [ # Secondary key used to access values within the partition\n      { name: \"mtitle\", type: {basic: TEXT} }\n    ],\n    ifNotExists: true,\n    values: [ # The values associated with the keys\n      { name: \"authors\", type: {basic:LIST, info:{ subTypes: [ { basic: TEXT } ] } } }\n    ]\n  )\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}/{{base_api_schema_path}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"{{base_api_schema_path}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create table with map, badge",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"type": "text",
						"value": "{{AUTH_TOKEN}}"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation createMapTable {\n  badge: createTable (\n    keyspaceName:\"library\",\n    tableName: \"badge\",\n    partitionKeys: [\n      { name: \"user_id\", type: {basic: UUID} },\n      { name: \"badge_type\", type: {basic:TEXT} }\n    ]\n    clusteringKeys: [\n      { name: \"badge_id\", type: { basic: INT} },\n      { name: \"earned\", type:{basic:MAP, info:{ subTypes: [ { basic: TEXT }, {basic: DATE}]}} }\n    ],\n    ifNotExists:true\n  )\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}{{base_api_schema_path}}",
					"host": [
						"{{base_url}}{{base_api_schema_path}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Alter table book, add columns isbn, language, pub_year, and genre",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation alterTableAddCols {\n  alterTableAdd(\n    keyspaceName:\"library\",\n    tableName:\"book\",\n    toAdd:[\n      { name: \"isbn\", type: { basic: TEXT } }\n      { name: \"language\", type: {basic: TEXT} }\n      { name: \"pub_year\", type: {basic: INT} }\n      { name: \"genre\", type: {basic:SET, info:{ subTypes: [ { basic: TEXT } ] } } }\n      { name: \"format\", type: {basic:SET, info:{ subTypes: [ { basic: TEXT } ] } } }\n    ]\n  )\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}{{base_api_schema_path}}",
					"host": [
						"{{base_url}}{{base_api_schema_path}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insert reader with UDT",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation insertReaderWithUDT{\n  ag: insertreader(\n    value: {\n      user_id: \"e0ed81c3-0826-473e-be05-7de4b4592f64\"\n      name: \"Allen Ginsberg\"\n      birthdate: \"1926-06-03\"\n      addresses: [{ street: \"Haight St\", city: \"San Francisco\", zip: \"94016\" }]\n    }\n  ) {\n    value {\n      user_id\n      name\n      birthdate\n      addresses {\n        street\n        city\n        zip\n      }\n    }\n  }\n }",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}{{base_api_path}}{{keyspaceName}}",
					"host": [
						"{{base_url}}{{base_api_path}}{{keyspaceName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insert book with CL option",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation insertBookWithOption {\n  nativeson: insertbook(value: {title:\"Native Son\", author:\"Richard Wright\"}, options: {consistency: LOCAL_QUORUM, ttl:86400}) {\n    value {\n      title\n    }\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}{{base_api_path}}{{keyspaceName}}",
					"host": [
						"{{base_url}}{{base_api_path}}{{keyspaceName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insert two books in one mutation",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation insert2Books {\n  moby: insertbook(value: {title:\"Moby Dick\", author:\"Herman Melville\"}) {\n    value {\n      title\n    }\n  }\n  catch22: insertbook(value: {title:\"Catch-22\", author:\"Joseph Heller\"}) {\n    value {\n      title\n    }\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}{{base_api_path}}{{keyspaceName}}",
					"host": [
						"{{base_url}}{{base_api_path}}{{keyspaceName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insert an article USING A LIST (authors)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"type": "text",
						"value": "{{AUTH_TOKEN}}"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation insertArticle {\n  magarticle: insertarticle(value: {title:\"How to use GraphQL\", authors: [\"First author\", \"Second author\"], mtitle:\"Database Magazine\"}) {\n    value {\n      title\n      mtitle\n      authors\n    }\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}{{base_api_path}}{{keyspaceName}}",
					"host": [
						"{{base_url}}{{base_api_path}}{{keyspaceName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insert one badge",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation insertOneBadge {\n  editor1: insertbadge(value: { user_id:\"b5b5666b-2a37-4d0b-a5eb-053e54fc242b\", badge_type: \"Editor\", badge_id: 100, earned: {key:\"Gold\", value:\"2020-11-20\"} } ) {\n    value {\n      user_id\n      badge_type\n      badge_id\n      earned\n    }\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}{{base_api_path}}/{{keyspaceName}}",
					"host": [
						"{{base_url}}{{base_api_path}}"
					],
					"path": [
						"{{keyspaceName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insert a reader USING A TUPLE (reviews)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# insert a reader record that uses a TUPLE\nmutation insertJaneWithTuple{\n   jane: insertreader(\n     value: {\n       user_id: \"b5b5666b-2a37-4d0b-a5eb-053e54fc242b\"\n       name: \"Jane Doe\"\n       birthdate: \"2000-01-01\"\n       email: [\"janedoe@gmail.com\", \"janedoe@yahoo.com\"]\n       reviews: { item0: \"Moby Dick\", item1: 5, item2: \"2020-12-01\" }\n     }\n   ) {\n     value {\n       user_id\n       name\n       birthdate\n       reviews {\n        item0\n        item1\n        item2\n      }\n     }\n   }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}{{base_api_path}}{{keyspaceName}}",
					"host": [
						"{{base_url}{{base_api_path}}{{keyspaceName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a book - Moby Dick with ISBN",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation updateOneBook {\n  moby: updatebook(value: {title:\"Moby Dick\", author:\"Herman Melville\", isbn: \"9780140861723\"}, ifExists: true ) {\n    value {\n      title\n      author\n      isbn\n    }\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}/graphql/library",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"graphql",
						"library"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a book again - Moby Dick with genre",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation updateOneBookAgain {\n moby: updatebook(value: {title:\"Moby Dick\", author:\"Herman Melville\", genre: [\"Drama\", \"Classic lit\"]}, ifExists: true ) {\n   value {\n     title\n     author\n     genre\n   }\n }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}/graphql/library",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"graphql",
						"library"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read (get) one book using the primary key title with a value",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# get one book using the primary key title with a value\nquery oneBook {\n    book (value: {title:\"Moby Dick\"}) {\n      values {\n        title\n        author\n      }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}{{base_api_path}}{{keyspaceName}}",
					"host": [
						"{{base_url}}{{base_api_path}}{{keyspaceName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read (get) three books using an IN filter clause of the primary key title",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ThreeBooks {\n  book(filter: { title: { in: [\"Native Son\", \"Moby Dick\", \"Catch-22\"] } } ) {\n      values {\n        title\n        author\n     }\n   }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}/graphql/library",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"graphql",
						"library"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read (get) reader with UDT",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "# query the author to see the UDT\nquery getReaderWithUDT{\n  reader(value: { name:\"Allen Ginsberg\" user_id: \"e0ed81c3-0826-473e-be05-7de4b4592f64\" }) {\n    values {\n      name\n      birthdate\n      addresses {\n        street\n        city\n        zip\n      }\n    }\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}/graphql/library",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"graphql",
						"library"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get keyspace",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"type": "text",
						"value": "{{AUTH_TOKEN}}"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetKeyspace {\n  keyspace(name: \"library\") {\n      name\n      dcs {\n          name\n          replicas\n      }\n      tables {\n          name\n          columns {\n              name\n              kind\n              type {\n                  basic\n                  info {\n                      name\n                  }\n              }\n          }\n      }\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}/graphql-schema",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"graphql-schema"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get tables",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetTables {\n  keyspace(name: \"library\") {\n      name\n      tables {\n          name\n          columns {\n              name\n              kind\n              type {\n                  basic\n                  info {\n                      name\n                  }\n              }\n          }\n      }\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}/graphql-schema",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"graphql-schema"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete one book",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetTables {\n  keyspace(name: \"library\") {\n      name\n      tables {\n          name\n          columns {\n              name\n              kind\n              type {\n                  basic\n                  info {\n                      name\n                  }\n              }\n          }\n      }\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}/graphql-schema",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"graphql-schema"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete one book with CL",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetTables {\n  keyspace(name: \"library\") {\n      name\n      tables {\n          name\n          columns {\n              name\n              kind\n              type {\n                  basic\n                  info {\n                      name\n                  }\n              }\n          }\n      }\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}/graphql-schema",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"graphql-schema"
					]
				}
			},
			"response": []
		},
		{
			"name": "Drop table called article",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"type": "text",
						"value": "{{AUTH_TOKEN}}"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation dropTableBook {\n  dropTable(keyspaceName:\"library\",\n    tableName:\"article\")\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}/graphql/library",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"graphql",
						"library"
					]
				}
			},
			"response": []
		},
		{
			"name": "Drop type",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation dropTableBook {\n  dropTable(keyspaceName:\"library\",\n    tableName:\"article\")\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}/graphql/library",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"graphql",
						"library"
					]
				}
			},
			"response": []
		},
		{
			"name": "Drop a column from a table",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation dropTableBook {\n  dropTable(keyspaceName:\"library\",\n    tableName:\"article\")\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}/graphql/library",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"graphql",
						"library"
					]
				}
			},
			"response": []
		},
		{
			"name": "Drop table IF EXISTS",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation dropTableIfExists {\n  dropTable(keyspaceName:\"library\",\n    tableName:\"magazine\",\n  ifExists: true)\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}{{base_api_schema_path}}",
					"host": [
						"{{base_url}}{{base_api_schema_path}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Drop keyspace",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Cassandra-Token",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation dropKsLibrary {\n  dropKeyspace(name:\"library\", ifExists: true)\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{base_url}}{{base_api_schema_path}}",
					"host": [
						"{{base_url}}{{base_api_schema_path}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"let url = 'https://' + pm.variables.get('ASTRA_CLUSTER_ID') + '-' + pm.variables.get('ASTRA_REGION') + '.apps.astra.datastax.com/api/rest/v1/auth'",
					"console.log(url);",
					"const postRequest = {",
					"  url: url,",
					"  method: 'POST',",
					"  header: {",
					"    'Content-Type': 'application/json'",
					"  },",
					"  body: {",
					"    mode: 'raw',",
					"    raw: JSON.stringify({",
					"        'username': pm.variables.get('username'),",
					"        'password': pm.variables.get('password'),",
					"    })",
					"  }",
					"};",
					"pm.sendRequest(postRequest, (error, response) => {",
					"  console.log(error ? error : response)",
					"  pm.request.headers.upsert({",
					"    key: \"x-cassandra-token\",",
					"    value: response.json()[\"authToken\"]",
					"});",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://8319febd-e7cf-4595-81e3-34f45d332d2a-us-east1.apps.astra.datastax.com"
		},
		{
			"key": "authToken",
			"value": "32a9a7f4-96eb-4cbf-b896-fc5fa15dec74\n"
		},
		{
			"key": "base_auth_url",
			"value": "https://8319febd-e7cf-4595-81e3-34f45d332d2a"
		},
		{
			"key": "username",
			"value": "polandll"
		},
		{
			"key": "password",
			"value": "12345abcd"
		},
		{
			"key": "base_api_path",
			"value": "/api/graphql"
		},
		{
			"key": "keyspaceName",
			"value": "library"
		},
		{
			"key": "base_api_schema_path",
			"value": "/api/graphql-schema"
		},
		{
			"key": "ASTRA_CLUSTER_ID",
			"value": "8319febd-e7cf-4595-81e3-34f45d332d2a\n"
		},
		{
			"key": "ASTRA_REGION",
			"value": "us-east1"
		},
		{
			"key": "AUTH_TOKEN",
			"value": "32a9a7f4-96eb-4cbf-b896-fc5fa15dec74",
			"disabled": true
		}
	]
}