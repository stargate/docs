mutation {
  deploySchema(
    keyspace: "library"
    expectedVersion: "1da4f190-b7fd-11eb-8258-1ff1380eaff5"
    schema: """
    type Address @cql_entity(target: UDT) @cql_input {
          street: String
          city: String
          state: String
          zipCode: String @cql_column(name: "zip_code")
    }
    type Review @cql_entity(target: UDT) @cql_input {
      bookTitle: String @cql_column(name: "book_title")
      comment: String
      rating: Int
      reviewDate: Date @cql_column(name: "review_date")
    }
    # Stargate does not require definition of fields in @key,
    # it uses the primary key
    type Book @key @cql_entity(name: "book") @cql_input {
      title: String! @cql_column(partitionKey: true, name: "book_title")
      isbn: String @cql_column(clusteringOrder: ASC)
      author: [String] @cql_index(name: "author_idx", target: VALUES)
    }

    type BookI @key @cql_entity(name: "booki") @cql_input {
      isbn: String! @cql_column(partitionKey: true)
      title: String @cql_column(clusteringOrder: ASC, name: "book_title")
      author: [String] @cql_index(name: "authori_idx", target: VALUES)
    }

    type SelectBookResult @cql_payload {
      data: [Book]
      pagingState: String
    }

    type InsertBookResponse @cql_payload {
      applied: Boolean!
      book: Book!
    }

    type Reader @key @cql_entity(name: "reader") @cql_input {
      name: String! @cql_column(partitionKey: true)
      user_id: Uuid! @cql_column(clusteringOrder: ASC)
      birthdate: Date @cql_index(name: "date_idx")
      email: [String] @cql_column(typeHint: "set<varchar>")
      reviews: [Review]  @cql_index(name: "review_idx", target: VALUES)
      address: [Address]
    }

    type ReaderU @key @cql_entity(name: "readeru") @cql_input {
      user_id: Uuid! @cql_column(partitionKey: true)
      name: String! @cql_column(clusteringOrder: ASC)
      birthdate: Date @cql_index(name: "dateu_idx")
      email: [String] @cql_column(typeHint: "set<varchar>")
      reviews: [Review]  @cql_index(name: "reviewu_idx", target: VALUES)
      address: [Address]
    }

    type LibCollection @key @cql_entity(name: "lib_collection") @cql_input {
      type: String! @cql_column(partitionKey: true)
      lib_id: Int! @cql_column(partitionKey: true)
      lib_name: String @cql_column(clusteringOrder: ASC)
    }

    type Query {
      # books by partition key
      bookByTitle(title: String!): [Book]
      # books by partition key + clustering column (primary key)
      bookByTitleAndIsbn( title: String!, isbn: String): [Book]
      # books by indexed column author
      bookByAuthor(
        author: String @cql_where(field: "author", predicate: CONTAINS)
      ): [Book]
      # books by partition key + indexed column author
      bookByTitleAndAuthor(title: String!, author: String @cql_where(field: "author", predicate: CONTAINS)
      ): [Book]
      # books by isbn (object: BookI)
      bookIByIsbn(isbn: String): [BookI]
      # books with paging state, paging size = 10
      booksWithPaging(
        title: String!,
        pagingState: String @cql_pagingState
      ): SelectBookResult @cql_select(pageSize: 10)
      # books by partition key WHERE title is IN a list
      booksIn(title: [String] @cql_where(field: "title", predicate: IN)
      ): [Book]
      # books by author WHERE author is CONTAINED in the author array (list)
      booksContainAuthor(author: String @cql_where(field: "author", predicate: CONTAINS)
      ): [Book]
      bookGT(
        title: String
        isbn: String @cql_where(field: "isbn", predicate: GT)
      ): [Book]
      bookLT(
        title: String
        isbn: String @cql_where(field: "isbn", predicate: LT)
      ): [Book]

      # readers by partition key
      readerByName(name:String!): [Reader]
      # readers by partition key + clustering column (primary key)
      readerByNameAndUserid(name:String!, user_id:Uuid): [Reader]
      # reader by user_id (object: ReaderU)
      readerUByUserid(user_id: Uuid!): [ReaderU]
      # reader by review that CONTAINS information
      #readerCONTAINS(
      #  reviews: ReviewInput! @cql_where(field: "reviews", predicate: CONTAINS)
      #): [Reader]
      #readerGT(
      #  name: String!,
      #  user_id: Uuid! @cql_where(field: "user_id", predicate:GT)
      #): [Reader]

      #libCollByType(type: String!): [LibCollection]
      # lib collection by primary key (composite)
      libCollByTypeAndLibid(type: String!, lib_id: Int!): [LibCollection]
      # lib collection by indexed column lib_name
      #libCollByName(lib_name: String): [LibCollection]
      # lib collection by type IN and lib_id IN
      #libCollIn(
      #  type: [String!] @cql_where(field: "type", predicate: IN)
      #  lib_id: [Int!] @cql_where(field: "lib_id", predicate: IN)
      #): [LibCollection]
    }
    type Mutation {
      insertBook(book: BookInput!): Book
      insertBookI(booki: BookIInput!): BookI
      insertBookIfNotExists(book: BookInput!): InsertBookResponse
      updateBook(book: BookInput): Boolean @cql_update
      deleteBook(book: BookInput!): Boolean
      insertReader(reader: ReaderInput!): Reader
      updateReader(reader: ReaderInput!): Boolean @cql_update
      deleteReader(reader: ReaderInput!): Boolean
      insertLibCollection(libColl: LibCollectionInput!): LibCollection
      updateLibCollection(libColl: LibCollectionInput!): Boolean @cql_update
      deleteLibCollection(libColl: LibCollectionInput!): Boolean @cql_delete(ifExists: true)
    }
    """
  ) {
    version
    cqlChanges
  }
}
