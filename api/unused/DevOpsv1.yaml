openapi: '3.0.0'
info:
  description: >-
    Use this REST API to perform lifecycle actions for DataStax Astra databases.</br> </br>
    To get started, create an authorization token to authenticate with your
    database using the /v2/authenticateServiceAccount endpoint using a service account for your organization. You can then create,
    terminate, resize, park, and unpark databases using the DevOps API.
  version: 2.0.0
  title: Astra DevOps API
  contact:
    email: ad-astra@datastax.com

security:
  - BearerAuth: []

tags:
  - name: Operations
    description: The DevOps APIs are for interacting with Astra databases and all aspects of their lifecycle
  - name: Authentication
    description: auth endpoint for service account authentication to get token used for all other database operations via the api

paths:

  /v2/authenticateServiceAccount:
    post:
      security: []
      tags:
        - Authentication
      summary: Create a token to use the Astra DevOps API endpoints
      description: Creates a new token for the service account
      operationId: AuthenticateServiceAccountToken
      requestBody:
        description: The service account to create a token for.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAccountTokenInput'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccountTokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /v2/databases:
    get:
      tags:
        - Operations
      summary: Returns a list of databases
      description: Get a list of databases visible to the user
      operationId: listDatabases
      parameters:
        - in: query
          name: include
          description: Allows filtering so that databases in listed states are returned
          required: false
          schema:
            type: string
            enum: [nonterminated, all, active, pending, preparing, prepared, initializing, parked, parking, unparking, terminating, terminated, resizing, error, maintenance]
            default: nonterminated
        - in: query
          name: provider
          description: Allows filtering so that databases from a given provider are returned
          required: false
          schema:
            type: string
            enum: [ALL, GCP, AWS, AZURE]
            default: ALL
        - in: query
          name: starting_after
          schema:
            type: string
          required: false
          description: Optional parameter for pagination purposes. Used as this value for starting retrieving a specific page of results
        - in: query
          name: limit
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
          required: false
          description: Optional parameter for pagination purposes. Specify the number of items for one page of data
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Database'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '5XX':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Operations
      summary: Create a new database
      description: Takes a user provided databaseInfo and returns the uuid for a new database
      operationId: createDatabase
      requestBody:
        description: Definition of new database
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseInfoCreate'
      responses:
        '201':
          description: created
          headers:
            Location:
              schema:
                type: string
                description: Database UUID
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/ServerError'

  /v2/databases/{databaseID}:
    get:
      tags:
        - Operations
      summary: Finds database by ID
      description: Returns specified database
      operationId: getDatabase
      parameters:
        - $ref: '#/components/parameters/DatabaseIdParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /v2/databases/{databaseID}/keyspaces/{keyspaceName}:
    post:
      tags:
        - Operations
      summary: Adds keyspace into database
      description: Adds the specified keyspace to the database
      operationId: addKeyspace
      parameters:
        - $ref: '#/components/parameters/DatabaseIdParam'
        - $ref: '#/components/parameters/KeyspaceNameParam'
      responses:
        '201':
          description: created
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /v2/databases/{databaseID}/secureBundleURL:
    post:
      summary: Obtain zip for connecting to the database
      description: 'Returns a temporary URL to download a zip file with certificates for connecting to the database. The URL expires after five minutes.<p>There are two types of the secure bundle URL:
        <ul><li><b>Internal</b> - Use with VPC peering connections to use private networking and avoid public internet for communication.</li>
        <li><b>External</b> - Use with any connection where the public internet is sufficient for communication between the application and the Astra database with MTLS.</li></ul>
        Both types support MTLS for communication via the driver.</p>'
      operationId: generateSecureBundleURL
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/DatabaseIdParam'
      responses:
        '200':
          description: Credentials provides a link to download cluster secure-connect-*.zip file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredsURL'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /v2/databases/{databaseID}/terminate:
    post:
      summary: Terminates a database
      description: Terminates a database
      operationId: terminateDatabase
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/DatabaseIdParam'
        - in: query
          name: preparedStateOnly
          description: For internal use only.  Used to safely terminate prepared databases.
          required: false
          schema:
            type: boolean
            default: false

      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /v2/databases/{databaseID}/park:
    post:
      summary: Parks a database
      description: Parks a database
      operationId: parkDatabase
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/DatabaseIdParam'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /v2/databases/{databaseID}/unpark:
    post:
      summary: Unparks a database
      description: Unparks a database
      operationId: unparkDatabase
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/DatabaseIdParam'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /v2/databases/{databaseID}/resize:
    post:
      summary: Resizes a database
      description: Resizes a database. Total number of capacity units desired should be specified. Reducing a size of a database is not supported at this time.
      operationId: resizeDatabase
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/DatabaseIdParam'
      requestBody:
        description: Map containing capacityUnits key with a value greater than the current number of capacity units (max increment of 3 additional capacity units)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CapacityUnits'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '5XX':
          $ref: '#/components/responses/ServerError'


  /v2/databases/{databaseID}/resetPassword:
    post:
      summary: Resets Password
      description: Sets a database password to the one specified in POST body
      operationId: resetPassword
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/DatabaseIdParam'
      requestBody:
        description: Map containing username and password. The specified password will be updated for the specified database user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPassword'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '5XX':
          $ref: '#/components/responses/ServerError'


  /v2/databases/{databaseID}/migrationProxy:
    put:
      tags:
        - Public
      summary: Launches migration proxy
      description: The migration proxy can be used to live-migrate a workload to astra
      operationId: launchMigrationProxy
      parameters:
        - $ref: '#/components/parameters/DatabaseIdParam'
      requestBody:
        description: A list of mappings of astra nodes to customer nodes currently in use
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/MigrationProxyConfiguration'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '5XX':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Public
      summary: Removes migration proxy
      description: Removes the existing migration proxy
      operationId: removeMigrationProxy
      parameters:
        - $ref: '#/components/parameters/DatabaseIdParam'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /v2/availableRegions:
    get:
      tags:
        - Operations
      summary: Returns supported regions and availability for a given user / org
      description: Returns all supported tier, cloud, region, count, and capacitity combinations
      operationId: listAvailableRegions
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableRegionCombination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '5XX':
          $ref: '#/components/responses/ServerError'

servers:
  - url: https://api.astra.datastax.com
components:

  parameters:

    DatabaseIdParam:
      in: path
      name: databaseID
      required: true
      description: String representation of the database ID
      schema:
        type: string

    TagNameParam:
      in: path
      name: tagName
      required: true
      description: Name of database tag
      schema:
        type: string

    KeyspaceNameParam:
      in: path
      name: keyspaceName
      required: true
      description: Name of database keyspace
      schema:
        type: string

  schemas:

    ServiceAccountTokenResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT that will be used as Authorization header on all requests requiring authentication.
          example: Bearer eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDA...

    ServiceAccountTokenInput:
      type: object
      required:
        - clientName
        - clientId
        - clientSecret
      properties:
        clientName:
          type: string
          description: The organization name in a more human readable format
          example: Binford Tools
        clientId:
          type: string
          description: The unique identifier for the client for authentication
          example: binford
        clientSecret:
          type: string
          description: The UUID client secret for the service account from
            the create service account response in the user interface
          format: uuid
          example: '00b03a37-209c-462a-971b-be35ab3321de'

    StatusEnum:
      type: string
      enum: [ACTIVE, PENDING, PREPARING, PREPARED, INITIALIZING, PARKED, PARKING, UNPARKING, TERMINATED, TERMINATING, RESIZING, ERROR, MAINTENANCE, UNKNOWN]
      example: ACTIVE

    Database:
      type: object
      description: Database contains the key information about a database
      required:
        - id
        - orgId
        - ownerId
        - info
        - status
      properties:
        id:
          type: string
          example: '1234-5678-91011121-3141'
        orgId:
          type: string
          example: 'organizations/7142-1283-54249566-3707'
        ownerId:
          type: string
          example: 'users/8243-2404-85664728-0889'
        info:
          $ref: '#/components/schemas/DatabaseInfo'
        creationTime:
          type: string
          description: CreationTime in ISO RFC3339 format
          example: "2012-11-01T22:08:41+00:00"
        terminationTime:
          type: string
          description: TerminationTime in ISO RFC3339 format
          example: "2019-11-01T22:08:41+00:00"
        status:
          $ref: '#/components/schemas/StatusEnum'
        storage:
          $ref: '#/components/schemas/Storage'
        availableActions:
          type: array
          items:
            type: string
            enum: [park, unpark, resize, resetPassword, addKeyspace, addDatacenters, terminateDatacenter, getCreds, terminate, removeKeyspace, addTable, removeMigrationProxy, launchMigrationProxy]
            example: park, terminate
        message:
          type: string
          description: Message to the customer about the cluster
          example: Auto parked due to inactivity
        studioUrl:
          type: string
          example: "http://path-to-studio:port"
        grafanaUrl:
          type: string
          example: "http://path-to-grafana:port"
        cqlshUrl:
          type: string
          example: "http://path-to-cqlsh:port/cqlsh"
        graphqlUrl:
          type: string
          example: "http://path-to-graqphl:port/api/graphql"
        dataEndpointUrl:
          type: string
          example: "http://path-to-dataendpoint:port/api/rest"

    DatabaseInfoCreate:
      type: object
      required:
        - name
        - keyspace
        - cloudProvider
        - tier
        - capacityUnits
        - region
        - user
        - password
      description: DatabaseInfo is the user-provided information describing a database
      properties:
        name:
          type: string
          example: mySplendidDatabase
          description: Name of the database--user friendly identifier
        keyspace:
          type: string
          example: myKeyspace
          description: Keyspace name in database
        cloudProvider:
          type: string
          example: AWS
          enum:
            - AWS
            - GCP
            - AZURE
          description: CloudProvider where the database lives
        tier:
          type: string
          example: developer
          enum:
            - developer
            - A5
            - A10
            - A20
            - A40
            - C10
            - C20
            - C40
            - D10
            - D20
            - D40
          description: Tier defines the compute power (vertical scaling) for the database, developer gcp is the free tier.
        capacityUnits:
          type: integer
          example: 1
          minimum: 1
          maximum: 100
          description: CapacityUnits is the amount of space available (horizontal scaling) for the database. For free tier the max CU's is 1, and 100 for CXX/DXX the max is 12 on startup.
        region:
          type: string
          example: us-west-2
          description: Region refers to the cloud region.
        user:
          type: string
          example: db_admin
          description: User is the user to access the database
        password:
          type: string
          example: "*****"
          description: Password for the user to access the database

    DatabaseInfo:
      type: object
      description: DatabaseInfo is the user-provided information describing a database
      properties:
        name:
          type: string
          example: mySplendidDatabase
          description: Name of the database--user friendly identifier
        keyspace:
          type: string
          example: myKeyspace
          description: Keyspace name in database
        cloudProvider:
          type: string
          example: AWS
          enum:
            - AWS
            - GCP
            - AZURE
          description: CloudProvider where the database lives
        tier:
          type: string
          example: developer
          enum:
            - developer
            - A5
            - A10
            - A20
            - A40
            - C10
            - C20
            - C40
            - D10
            - D20
            - D40
          description: Tier defines the compute power (vertical scaling) for the database
        capacityUnits:
          type: integer
          example: 1
          minimum: 1
          maximum: 100
          description: CapacityUnits is the amount of space available (horizontal scaling) for the database. For free tier the max CU's is 1, and 12 for C10 the max is 12 on startup.
        region:
          type: string
          example: us-west-2
          description: Region refers to the cloud region.
        user:
          type: string
          example: db_admin
          description: User is the user to access the database
        password:
          type: string
          example: "*****"
          description: Password for the user to access the database
        additionalKeyspaces:
          type: array
          maximum: 1
          items:
            type: string
            example: additionalKeyspace
          description: Additional keyspaces names in database

    CredsURL:
      description: CredsURL from which the creds zip may be downloaded
      type: object
      required:
        - downloadURL
      properties:
        downloadURL:
          type: string
          example: nifty.cloud.datastax.com:9092
          description: DownloadURL is only valid for about 5 minutes
        downloadURLInternal:
          type: string
          example: internal-nifty.cloud.datastax.com:9092
          description: Internal DownloadURL is only valid for about 5 minutes
        downloadURLMigrationProxy:
          type: string
          example: proxy-nifty.cloud.datastax.com:9092
          description: Migration Proxy DownloadURL is only valid for about 5 minutes
        downloadURLMigrationProxyInternal:
          type: string
          example: proxy-nifty.cloud.datastax.com:9092
          description: Internal Migration Proxy DownloadURL is only valid for about 5 minutes

    UserPassword:
      description: UserPassword specifies a username and new password. The specified password will be updated for the specified database user
      type: object
      properties:
        username:
          type: string
          example: dbusername
        password:
          type: string
          example: MyNewSecur3Passw0rd
          description: New password (min 6 characters)

    MigrationProxyConfiguration:
      description: Configuration of the migration proxy and mappings of astra node to a customer node currently in use
      type: object
      required:
        - originUsername
        - originPassword
        - mappings
      properties:
        originUsername:
          type: string
          example: cassandraUsername
          description: origin cassandra username
        originPassword:
          type: string
          example: cassandraPassword
          description: origin cassandra password
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/MigrationProxyMapping'

    MigrationProxyMapping:
      description: A mapping of astra node to a customer node currently in use
      type: object
      required:
        - originIP
        - originPort
        - rack
        - rackNodeOrdinal
      properties:
        originIP:
          type: string
          example: 172.18.19.20
          description: ip on which the node currently in use is accessible
        originPort:
          type: integer
          example: 9042
          description: port on which the node currently in use is accessible
        rack:
          type: integer
          example: 2
          description: the number of the rack, usually 0, 1, or 2
        rackNodeOrdinal:
          type: integer
          example: 1
          description: The number of the node in a given rack, starting with 0

    CapacityUnits:
      description: CapacityUnits is used to horizontally scale a database.
      type: object
      properties:
        capacityUnits:
          type: integer
          minimum: 1
          maximum: 100
          example: 4
          description: CapacityUnits an be increased by a max of three additional capacity units per operation. Reducing capacity units is not supported at this time
    Storage:
      description: Storage contains the information about how much storage space a cluster has available
      type: object
      required:
        - nodeCount
        - replicationFactor
        - totalStorage
      properties:
        nodeCount:
          type: integer
          example: 6
          description: NodeCount for the cluster
        replicationFactor:
          type: integer
          example: 3
          description: ReplicationFactor is the number of nodes storing a piece of data
        totalStorage:
          type: integer
          example: 800
          description: TotalStorage of the cluster in GB
        usedStorage:
          type: integer
          example: 348
          description: UsedStorage in GB

    RegionCombination:
      type: object
      description: RegionCombination defines a Tier, cloud provider, region combination
      required:
        - tier
        - cloudProvider
        - region
        - cost
      properties:
        tier:
          type: string
          example: Free
        cloudProvider:
          type: string
          example: GCP
        region:
          type: string
          example: us-east1
        cost:
          $ref: "#/components/schemas/Costs"

    AvailableRegionCombination:
      type: object
      description: AvailableRegionCombination defines a Tier, cloud provider, region combination
      required:
        - tier
        - cloudProvider
        - region
        - cost
        - databaseCountUsed
        - databaseCountLimit
        - capacityUnitsUsed
        - capacityUnitsLimit
        - defaultStoragePerCapacityUnitGb
      properties:
        tier:
          type: string
          example: Free
        cloudProvider:
          type: string
          example: GCP
        region:
          type: string
          example: us-east1
        cost:
          $ref: "#/components/schemas/Costs"
        databaseCountUsed:
          type: integer
          example: 0
        databaseCountLimit:
          type: integer
          example: 1
        capacityUnitsUsed:
          type: integer
          example: 0
        capacityUnitsLimit:
          type: integer
          example: 30
        defaultStoragePerCapacityUnitGb:
          type: integer
          example: 500

    Costs:
      properties:
        costPerMinCents:
          type: number
          format: double
          example: 0
        costPerHourCents:
          type: number
          format: double
          example: 0
        costPerDayCents:
          type: number
          format: double
          example: 0
        costPerMonthCents:
          type: number
          format: double
          example: 0
        costPerMinParkedCents:
          type: number
          format: double
          example: 0
        costPerHourParkedCents:
          type: number
          format: double
          example: 0
        costPerDayParkedCents:
          type: number
          format: double
          example: 0
        costPerMonthParkedCents:
          type: number
          format: double
          example: 0

    Errors:
      description: Errors is a collection of individual Error objects
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'

    Error:
      description: ModelError information that is returned to users
      type: object
      required:
        - id
        - message
      properties:
        ID:
          type: integer
          example: 123
          description: API specific error code
        message:
          type: string
          example: Something is broken
          description: User-friendly description of error

  responses:

    # 200
    Ok:
      description: The request completed successfully

    # 202
    Accepted:
      description: The request was accepted

    # 400
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'

    # 401
    Unauthorized:
      description: The user is unauthorized to perform the operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'

    # 404
    NotFound:
      description: The specified database was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'

    # 409
    Conflict:
      description: The database is not in a valid state to perform the operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'

    # 422
    UnprocessableEntity:
      description: The structured data in the request could not be parsed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'

    # 5XX
    ServerError:
      description: A server error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'

  securitySchemes:

    BearerAuth:
      description: A JWT token must be passed in header in order to access the API
      type: http
      scheme: bearer
