openapi: 3.0.1
info:
 title: Stargate Document API reference
 description: "The Stargate Document API provides CRUD operations on document data managed by Stargate."
 license:
   name: Apache 2.0
   url: http://www.apache.org/licenses/LICENSE-2.0.html
 version: 2.0.0
servers:
 - url: https://localhost:8082
   description: Replace the port if necessary.
tags:
 - name: Auth
   description: auth
 - name: Schemas
   description: storage configuration
 - name: Documents
   description: document data
paths:
 /v1/auth:
    servers:
      - url: https://localhost:8081
    post:
     tags:
       - Auth
     summary: Create an auth token
     description: Create an authorization token.
     operationId: createToken
     parameters:
       - $ref: "#/components/parameters/pretty"
     requestBody:
       content:
         application/json:
           schema:
             $ref: "#/components/schemas/Credentials"
       required: true
     responses:
       201:
         description: Created
         content:
           application/json:
             examples:
               default:
                 value: { "authToken": "string" }
       400:
         $ref: "#/components/responses/400"
       401:
         $ref: "#/components/responses/401"
       500:
         $ref: "#/components/responses/500"
 /v2/namespaces/{namespace-id}/collections:
   post:
     tags:
       - Documents
     summary: Create a collection
     operationId: createCollection
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
       - $ref: "#/components/parameters/namespace-id"
     requestBody:
       description: ""
       required: true
       content:
         application/json:
           schema:
             type: object
           examples:
             default:
               value:
                 {
                   "name": "users",
                   "fields": { "name": { "type": "String", "index": true } },
                   "validationAction": "warn",
                 }
     responses:
       201:
         description: resource created
         content:
           application/json:
             examples:
               default:
                 value: { "name": "killrvideo" }
       400:
         $ref: "#/components/responses/400"
       401:
         $ref: "#/components/responses/401"
       409:
         $ref: "#/components/responses/409"
       500:
         $ref: "#/components/responses/500"
   get:
     tags:
       - Documents
     summary: List collections in a namespace
     operationId: listCollections
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
       - $ref: "#/components/parameters/namespace-id"
       - $ref: "#/components/parameters/raw"
     responses:
       200:
         description: ""
         content:
           application/json:
             examples:
               default:
                 value:
                   {
                     "data":
                       [
                         {
                           "name": "users",
                           "fields":
                             { "name": { "type": "String", "index": true } },
                           "validationAction": "warn",
                         },
                       ],
                   }
       401:
         $ref: "#/components/responses/401"
       500:
         $ref: "#/components/responses/500"
 /v2/schemas/namespaces/{namespace-id}/collections/{collection-id}:
   get:
     tags:
       - Documents
     summary: Get a collection
     operationId: getCollection
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
       - $ref: "#/components/parameters/namespace-id"
       - $ref: "#/components/parameters/collection-id"
       - $ref: "#/components/parameters/raw"
     responses:
       200:
         description: ""
         content:
           application/json:
             examples:
               default:
                 value:
                   {
                     "data":
                       [
                         {
                           "name": "users",
                           "fields":
                             { "name": { "type": "String", "index": true } },
                           "validationAction": "warn",
                         },
                       ],
                   }
       401:
         $ref: "#/components/responses/401"
       500:
         $ref: "#/components/responses/500"
#    put:
#      tags:
#        - Documents
#      summary: Update a collection
#      parameters:
#        - $ref: "#/components/parameters/databaseId"
#        - $ref: "#/components/parameters/region"
#        - $ref: "#/components/parameters/pretty"
#        - $ref: "#/components/parameters/X-Cassandra-Token"
#        - $ref: "#/components/parameters/namespace-id"
#        - $ref: "#/components/parameters/collection-id"
#      requestBody:
#        description: ""
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#            examples:
#              default:
#                value:
#                  {
#                    "name": "users",
#                    "fields": { "name": { "type": "String", "index": true } },
#                    "validationAction": "warn",
#                  }
#      responses:
#        200:
#          description: resource updated
#          content:
#            application/json:
#              examples:
#                default:
#                  value: { "name": "users" }
#        400:
#          $ref: "#/components/responses/400"
#        401:
#          $ref: "#/components/responses/401"
#        409:
#          $ref: "#/components/responses/409"
#        500:
#          $ref: "#/components/responses/500"
   delete:
     tags:
       - Documents
     summary: Delete a collection
     operationId: deleteCollectionSchema
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
       - $ref: "#/components/parameters/namespace-id"
       - $ref: "#/components/parameters/collection-id"
     responses:
       204:
         description: resource deleted
         content:
           application/json:
             examples:
               default:
                 value: {}
       401:
         $ref: "#/components/responses/401"
       500:
         $ref: "#/components/responses/500"
 /v2/namespaces/{namespace-id}/collections/{collection-id}:
   get:
     tags:
       - Documents
     summary: Search for documents in {collection-id}
     operationId: searchDoc
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
       - $ref: "#/components/parameters/namespace-id"
       - $ref: "#/components/parameters/collection-id"
       - $ref: "#/components/parameters/where"
       - $ref: "#/components/parameters/fields"
       - $ref: "#/components/parameters/page-size"
       - $ref: "#/components/parameters/page-state"
       - $ref: "#/components/parameters/sort"
       - $ref: "#/components/parameters/raw"
     responses:
       200:
         description: ""
         content:
           application/json:
             examples:
               default:
                 value:
                   {
                     "count": 1,
                     "pageState": "2f4acd34",
                     "data":
                       [
                         {
                           "documentId": "my-first-post-a6h54",
                           "title": "Hello World",
                           "author": { "name": "Cliff Wicklow" }
                         }
                       ]
                   }
       400:
         $ref: "#/components/responses/400"
       401:
         $ref: "#/components/responses/401"
       500:
         $ref: "#/components/responses/500"
   post:
     tags:
       - Documents
     summary: Add a new document to {collection-id}
     operationId: addDoc
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
       - $ref: "#/components/parameters/namespace-id"
       - $ref: "#/components/parameters/collection-id"
     requestBody:
       description: document
       required: true
       content:
         application/json:
           schema:
             type: object
           examples:
             default:
               value:
                 {
                   "title": "Hello World",
                   "author":
                     {
                       "name": "CRW",
                       "social":
                         { "foo-bar-789": { "followers": 1, "likes": 7 } },
                     },
                 }
     responses:
       201:
         description: resource created
         content:
           application/json:
             examples:
               default:
                 value:
                   { "documentId": "e73c77ec-002d-457a-8b65-8ce7cfb15fc7" }
       400:
         $ref: "#/components/responses/400"
       401:
         $ref: "#/components/responses/401"
       409:
         $ref: "#/components/responses/409"
       500:
         $ref: "#/components/responses/500"
 /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}:
   get:
     tags:
       - Documents
     summary: Get a document by {document-id}
     operationId: getDocById
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
       - $ref: "#/components/parameters/namespace-id"
       - $ref: "#/components/parameters/collection-id"
       - $ref: "#/components/parameters/document-id"
       - $ref: "#/components/parameters/fields"
       - $ref: "#/components/parameters/raw"
     responses:
       200:
         description: ""
         content:
           application/json:
             examples:
               default:
                 value:
                   {
                     "data":
                       {
                         "documentId": "my-first-post-a6h54",
                         "title": "Hello World",
                         "author": { "name": "Cliff Wicklow" }
                       }
                   }
       400:
         $ref: "#/components/responses/400"
       401:
         $ref: "#/components/responses/401"
       404:
         $ref: "#/components/responses/404"
       500:
         $ref: "#/components/responses/500"
   put:
     tags:
       - Documents
     summary: Replace a document by {document-id}
     operationId: replaceDoc
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
       - $ref: "#/components/parameters/namespace-id"
       - $ref: "#/components/parameters/collection-id"
       - $ref: "#/components/parameters/document-id"
     requestBody:
       description: document
       required: true
       content:
         application/json:
           schema:
             type: object
           examples:
             default:
               value: { "title": "Hello World", "author": { "name": "DKG" } }
     responses:
       200:
         description: resource updated
         content:
           application/json:
             examples:
               default:
                 value:
                   { "documentId": "e73c77ec-002d-457a-8b65-8ce7cfb15fc7" }
       400:
         $ref: "#/components/responses/400"
       401:
         $ref: "#/components/responses/401"
       500:
         $ref: "#/components/responses/500"
   patch:
     tags:
       - Documents
     summary: Update part of a document
     operationId: updatePartOfDoc
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
       - $ref: "#/components/parameters/namespace-id"
       - $ref: "#/components/parameters/collection-id"
       - $ref: "#/components/parameters/document-id"
     requestBody:
       description: document
       required: true
       content:
         application/json:
           schema:
             type: object
           examples:
             default:
               value: { "title": "Hello World" }
     responses:
       200:
         description: resource updated
         content:
           application/json:
             examples:
               default:
                 value:
                   { "documentId": "e73c77ec-002d-457a-8b65-8ce7cfb15fc7" }
       400:
         $ref: "#/components/responses/400"
       401:
         $ref: "#/components/responses/401"
       404:
         $ref: "#/components/responses/404"
       500:
         $ref: "#/components/responses/500"
   delete:
     tags:
       - Documents
     summary: Delete a  document
     operationId: deleteDoc
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
       - $ref: "#/components/parameters/namespace-id"
       - $ref: "#/components/parameters/collection-id"
       - $ref: "#/components/parameters/document-id"
     responses:
       204:
         description: resource deleted
         content:
           application/json:
             examples:
               default:
                 value: {}
       401:
         $ref: "#/components/responses/401"
       500:
         $ref: "#/components/responses/500"
 /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}/{document-path}:
   get:
     tags:
       - Documents
     summary: Get a sub document by {document-path}
     operationId: GetSubDocByPath
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
       - $ref: "#/components/parameters/namespace-id"
       - $ref: "#/components/parameters/collection-id"
       - $ref: "#/components/parameters/document-id"
       - $ref: "#/components/parameters/document-path"
       - $ref: "#/components/parameters/fields"
       - $ref: "#/components/parameters/raw"
     responses:
       200:
         description: ""
         content:
           application/json:
             examples:
               default:
                 value:
                   {
                     "documentPath": "author",
                     "data": { "name": "Cliff Wicklow" }
                   }
       400:
         $ref: "#/components/responses/400"
       401:
         $ref: "#/components/responses/401"
       404:
         $ref: "#/components/responses/404"
       500:
         $ref: "#/components/responses/500"
   put:
     tags:
       - Documents
     summary: Replace a sub document by {document-path}
     operationId: replaceSubDoc
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
       - $ref: "#/components/parameters/namespace-id"
       - $ref: "#/components/parameters/collection-id"
       - $ref: "#/components/parameters/document-id"
       - $ref: "#/components/parameters/document-path"
     requestBody:
       description: document
       required: true
       content:
         application/json:
           schema:
             type: object
           examples:
             default:
               value: { "foo-bar-789": { "followers": 1, "likes": 7 } }

     responses:
       201:
         description: resource created
         content:
           application/json:
             examples:
               default:
                 value:
                   { "documentId": "e73c77ec-002d-457a-8b65-8ce7cfb15fc7" }
       400:
         $ref: "#/components/responses/400"
       401:
         $ref: "#/components/responses/401"
       500:
         $ref: "#/components/responses/500"
   patch:
     tags:
       - Documents
     summary: Update part of a sub document by {document-path}
     operationId: updatePartOfSubDoc
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
       - $ref: "#/components/parameters/namespace-id"
       - $ref: "#/components/parameters/collection-id"
       - $ref: "#/components/parameters/document-id"
       - $ref: "#/components/parameters/document-path"
     requestBody:
       description: document
       required: true
       content:
         application/json:
           schema:
             type: object
           examples:
             default:
               value: { "title": "Hello World" }
     responses:
       200:
         description: resource updated
         content:
           application/json:
             examples:
               default:
                 value:
                   { "documentId": "e73c77ec-002d-457a-8b65-8ce7cfb15fc7" }
       400:
         $ref: "#/components/responses/400"
       401:
         $ref: "#/components/responses/401"
       404:
         $ref: "#/components/responses/404"
       500:
         $ref: "#/components/responses/500"
   delete:
     tags:
       - Documents
     summary: Delete a sub document by {document-path}
     operationId: deleteSubDoc
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
       - $ref: "#/components/parameters/namespace-id"
       - $ref: "#/components/parameters/collection-id"
       - $ref: "#/components/parameters/document-id"
       - $ref: "#/components/parameters/document-path"
     responses:
       204:
         description: resource deleted
         content:
           application/json:
             examples:
               default:
                 value: {}
       401:
         $ref: "#/components/responses/401"
       500:
         $ref: "#/components/responses/500"
 /v2/schemas/namespaces:
   post:
     tags:
       - Schemas
     summary: Create a namespace
     operationId: createNamespace
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
     requestBody:
       description: "A map representing a namespace with SimpleStrategy or NetworkTopologyStrategy\
         \ with default replicas of 1 and 3 respectively \nSimple:\n```json\n{ \"\
         name\": \"killrvideo\", \"replicas\": 1 }\n````\nNetwork Topology:\n```json\n\
         {\n  \"name\": \"killrvideo\",\n   \"datacenters\":\n      [\n         {\
         \ \"name\": \"dc1\", \"replicas\": 3 },\n         { \"name\": \"dc2\", \"\
         replicas\": 3 },\n      ],\n}\n```"
       required: true
       content:
         application/json:
           schema:
             type: object
           examples:
             simple strategy:
               value: { "name": "killrvideo" }
             datacenters:
               value:
                 {
                   "name": "killrvideo",
                   "datacenters":
                     [
                       { "name": "dc1", "replicas": 3 },
                       { "name": "dc2", "replicas": 3 },
                     ]
                 }
     responses:
       201:
         description: resource created
         content:
           application/json:
             examples:
               default:
                 value: { "name": "killrvideo" }
       400:
         $ref: "#/components/responses/400"
       401:
         $ref: "#/components/responses/401"
       409:
         $ref: "#/components/responses/409"
       500:
         $ref: "#/components/responses/500"
   get:
     tags:
       - Schemas
     summary: Get all namespaces
     description: Retrieve all available namespaces.
     operationId: getAllNamespaces
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
       - $ref: "#/components/parameters/raw"
     responses:
       200:
         description: ""
         content:
           application/json:
             examples:
               default:
                 value:
                   {
                     "data":
                       [
                         {
                           "name": "killrvideo",
                           "datacenters":
                             [
                               { "name": "dc1", "replicas": 3 },
                               { "name": "dc2", "replicas": 3 },
                             ],
                         },
                       ],
                   }
       401:
         $ref: "#/components/responses/401"
       500:
         $ref: "#/components/responses/500"
 /v2/schemas/namespaces/{namespace-id}:
   get:
     tags:
       - Schemas
     summary: Get a namespace
     operationId: getNamespace
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
       - $ref: "#/components/parameters/namespace-id"
       - $ref: "#/components/parameters/raw"
     responses:
       200:
         description: ""
         content:
           application/json:
             examples:
               default:
                 value:
                   {
                     "data":
                       {
                         "name": "killrvideo",
                         "datacenters":
                           [
                             { "name": "dc1", "replicas": 3 },
                             { "name": "dc2", "replicas": 3 },
                           ],
                       },
                   }
       400:
         $ref: "#/components/responses/400"
       401:
         $ref: "#/components/responses/401"
       404:
         $ref: "#/components/responses/404"
       500:
         $ref: "#/components/responses/500"
   delete:
     tags:
       - Schemas
     summary: Delete a namespace
     operationId: deleteNamespace
     parameters:
       - $ref: "#/components/parameters/pretty"
       - $ref: "#/components/parameters/X-Cassandra-Token"
       - $ref: "#/components/parameters/namespace-id"
     responses:
       204:
         description: resource deleted
         content:
           application/json:
             examples:
               default:
                 value: {}
       401:
         $ref: "#/components/responses/401"
       500:
         $ref: "#/components/responses/500"
components:
 parameters:
   X-Cassandra-Token:
     name: X-Cassandra-Token
     in: header
     required: true
     description: "The token returned from the authorization endpoint for classic databases. Use this token in each request."
     schema:
       type: string
   pretty:
     name: pretty
     in: query
     description: format results
     schema:
       type: boolean
   raw:
     name: raw
     in: query
     description: unwrap results
     schema:
       type: boolean
   namespace-id:
     name: namespace-id
     in: path
     description: namespace name
     required: true
     schema:
       type: string
   collection-id:
     name: collection-id
     in: path
     description: name of the document collection
     required: true
     schema:
       type: string
   document-id:
     name: document-id
     in: path
     description: the id of the document
     required: true
     schema:
       type: string
   document-path:
     name: document-path
     in: path
     description: a JSON path
     required: true
     schema:
       type: string
   fields:
     name: fields
     in: query
     description: URL escaped, comma delimited list of keys to include
     schema:
       type: string
     examples:
       default:
         value: "name, email"
   sort:
     name: sort
     in: query
     description: keys to sort by
     schema:
       type: object
     examples:
       default:
         value: { "documentId": "asc", "name": "desc" }
   page-state:
     name: page-state
     in: query
     description: move the cursor to a particular result
     schema:
       type: string
     examples:
       default:
         value: ""
   page-size:
     name: page-size
     description: restrict the number of returned items (max 100)
     in: query
     schema:
       type: integer
       format: int32
     examples:
       default:
         value: 10
   where:
     name: where
     in: query
     description: |
       URL escaped JSON query using the following keys:

       | Key | Operation |
       |-|-|
       | $lt | Less Than |
       | $lte | Less Than Or Equal To |
       | $gt | Greater Than |
       | $gte | Greater Than Or Equal To |
       | $ne | Not Equal To |
       | $in | Contained In |
       | $exists | A value is set for the key |
       | $select | This matches a value for a key in the result of a different query |
       | $dontSelect | Requires that a key’s value not match a value for a key in the result of a different query |
       | $all | Contains all of the given values |
       | $regex | Requires that a key’s value match a regular expression |
       | $text | Performs a full text search on indexed fields |

     schema:
       type: object
     examples:
       search with or:
         value:
           {
             "author.name": "Cliff Wicklow",
             "createTime": { "$gte": 0 },
             "$or":
               [{ "name": "Cliff" }, { "documentId": "my-first-post-a6h54" }]
           }
 examples: {}
 responses:
   404:
     description: Not Found
     content:
       application/json:
         examples:
           default:
             value: { "code": 404, "description": "Not Found" }
   400:
     description: Invalid input
     content:
       application/json:
         examples:
           default:
             value: { "code": 400, "description": "Invalid input" }
   401:
     description: Unauthorized
     content:
       application/json:
         examples:
           default:
             value: { "code": 401, "description": "Unauthorized" }
   409:
     description: Conflict
     content:
       application/json:
         examples:
           default:
             value: { "code": 409, "description": "resource already exists." }
   500:
     description: Internal server error
     content:
       application/json:
         examples:
           default:
             value: { "code": 500, "description": "Internal server error" }
 schemas:
   Credentials:
     type: object
     required:
       - username
       - password
     description: User credentials for authenticating
     properties:
       username:
         type: string
         description: Username
       password:
         type: string
         description: Password
