---
openapi: 3.0.3
info:
  title: Stargate REST API
  description: "The Stargate REST API provides CRUD operations on table data managed by Stargate.\
    \ Keep in mind that you will need information for the server ({databaseId} and {region}) for all of these operations."
  termsOfService: https://www.datastax.com/legal
  contact:
    name: DataStax
    url: https://www.datastax.com/contact-us
  version: 2.0.13
servers:
- url: /api/rest
tags:
- name: data
  description: DML operations
- name: schemas
  description: DDL operations
paths:
  /health:
    get:
      tags:
      - Health Resource
      responses:
        "200":
          description: OK
  /v2/cql:
    post:
      tags:
      - data
      summary: CQL Query
      description: Execute a cql query directly
      parameters:
      - $ref: '#/components/parameters/keyspaceQP'
      - $ref: '#/components/parameters/page-size'
      - $ref: '#/components/parameters/page-state'
      - $ref: '#/components/parameters/raw'
      requestBody:
        description: CQL Query String
        content:
          text/plain:
            schema:
              pattern: \S
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    format: int32
                    description: The count of records returned.
                    type: integer
                  pageState:
                    description: A string representing the paging state to be used
                      on future paging requests.
                    type: string
                    nullable: true
                  data:
                    description: The rows returned by the request.
                    type: array
                    items:
                      type: object
                      additionalProperties:
                        type: object
        "400":
          $ref: '#/components/responses/GENERAL_400'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
  /v2/keyspaces/{keyspaceName}/{tableName}:
    get:
      tags:
      - data
      summary: Search a table
      description: Search a table using a json query as defined in the `where` query
        parameter
      parameters:
      - name: where
        in: query
        description: "JSON query using the following keys: \n | Key | Operation |\
          \ \n |-|-| \n | $lt | Less Than | \n | $lte | Less Than Or Equal To | \n\
          \ | $gt | Greater Than | \n | $gte | Greater Than Or Equal To | \n | $eq\
          \ | Equal To | \n | $ne | Not Equal To | \n | $in | Contained In | \n |\
          \ $contains | Contains the given element (for lists or sets) or value (for\
          \ maps) | \n | $containsKey | Contains the given key (for maps) | \n | $containsEntry\
          \ | Contains the given key/value entry (for maps) | \n | $exists | Returns\
          \ the rows whose column (boolean type) value is true | "
        required: true
        schema:
          type: object
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/page-size'
      - $ref: '#/components/parameters/page-state'
      - $ref: '#/components/parameters/raw'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/tableName'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RowsResponse'
        "400":
          $ref: '#/components/responses/GENERAL_400'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
    post:
      tags:
      - data
      summary: Add row
      description: "Add a row to a table in your database. If the new row has the\
        \ same primary key as that of an existing row, the database processes it as\
        \ an update to the existing row."
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/tableName'
      requestBody:
        description: Fields of the Row to create as JSON
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "201":
          description: Resource created
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: '#/components/responses/GENERAL_400'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
  /v2/keyspaces/{keyspaceName}/{tableName}/rows:
    get:
      tags:
      - data
      summary: Retrieve all rows
      description: Get all rows from a table.
      parameters:
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/page-size'
      - $ref: '#/components/parameters/page-state'
      - $ref: '#/components/parameters/raw'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/tableName'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RowsResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        "400":
          $ref: '#/components/responses/GENERAL_400'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
  /v2/keyspaces/{keyspaceName}/{tableName}/{primaryKey}:
    get:
      tags:
      - data
      summary: Get row(s)
      description: Get rows from a table based on the primary key.
      parameters:
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/page-size'
      - $ref: '#/components/parameters/page-state'
      - $ref: '#/components/parameters/primaryKey'
      - $ref: '#/components/parameters/raw'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/tableName'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RowsResponse'
        "400":
          $ref: '#/components/responses/GENERAL_400'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
    put:
      tags:
      - data
      summary: Replace row(s)
      description: Update existing rows in a table.
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/primaryKey'
      - $ref: '#/components/parameters/raw'
      - $ref: '#/components/parameters/tableName'
      requestBody:
        description: Fields of the Row to update as JSON
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: resource updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESTResponseWrapper'
        "400":
          $ref: '#/components/responses/GENERAL_400'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
    delete:
      tags:
      - data
      summary: Delete row(s)
      description: Delete one or more rows in a table
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/primaryKey'
      - $ref: '#/components/parameters/tableName'
      responses:
        "204":
          description: No Content
        "400":
          $ref: '#/components/responses/GENERAL_400'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
    patch:
      tags:
      - data
      summary: Update part of a row(s)
      description: Perform a partial update of one or more rows in a table
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/primaryKey'
      - $ref: '#/components/parameters/raw'
      - $ref: '#/components/parameters/tableName'
      requestBody:
        description: Fields of the Row to patch as JSON
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: Resource updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESTResponseWrapper'
        "400":
          $ref: '#/components/responses/GENERAL_400'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
  /v2/schemas/keyspaces:
    get:
      tags:
      - schemas
      summary: Get all keyspaces
      description: Retrieve all available keyspaces.
      parameters:
      - $ref: '#/components/parameters/raw'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sgv2Keyspace'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
    post:
      tags:
      - schemas
      summary: Create a keyspace
      description: Create a new keyspace.
      requestBody:
        description: "A map representing a keyspace with SimpleStrategy or NetworkTopologyStrategy\
          \ with default replicas of 1 and 3 respectively \nSimple:\n```json\n{ \"\
          name\": \"killrvideo\", \"replicas\": 1}\n````\nNetwork Topology:\n```json\n\
          {\n  \"name\": \"killrvideo\",\n   \"datacenters\":\n      [\n         {\
          \ \"name\": \"dc1\", \"replicas\": 3 },\n         { \"name\": \"dc2\", \"\
          replicas\": 3 },\n      ],\n}\n```"
        content:
          application/json:
            schema:
              pattern: \S
              type: string
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
  /v2/schemas/keyspaces/{keyspaceName}:
    get:
      tags:
      - schemas
      summary: Get a keyspace
      description: Return a single keyspace specification.
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/raw'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sgv2Keyspace'
        "400":
          $ref: '#/components/responses/GENERAL_400'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "404":
          $ref: '#/components/responses/GENERAL_404'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
    delete:
      tags:
      - schemas
      summary: Delete a keyspace
      description: Delete a single keyspace.
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      responses:
        "204":
          $ref: '#/components/responses/GENERAL_204'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
  /v2/schemas/keyspaces/{keyspaceName}/tables:
    get:
      tags:
      - schemas
      summary: Get all tables
      description: Retrieve all tables in a specific keyspace.
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/raw'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TableResponse'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "404":
          $ref: '#/components/responses/GENERAL_404'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
    post:
      tags:
      - schemas
      summary: Create a table
      description: Add a table in a specific keyspace.
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      requestBody:
        description: Table definition as JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableAdd'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: '#/components/responses/GENERAL_400'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
  /v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}:
    get:
      tags:
      - schemas
      summary: Get a table
      description: Retrieve data for a single table in a specific keyspace.
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/raw'
      - $ref: '#/components/parameters/tableName'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableResponse'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "404":
          $ref: '#/components/responses/GENERAL_404'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
    put:
      tags:
      - schemas
      summary: Replace a table definition
      description: "Update a single table definition, except for columns, in a keyspace."
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/tableName'
      requestBody:
        description: Table update definition as JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableAdd'
        required: true
      responses:
        "200":
          description: Resource updated
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: '#/components/responses/GENERAL_400'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "404":
          $ref: '#/components/responses/GENERAL_404'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
    delete:
      tags:
      - schemas
      summary: Delete a table
      description: Delete a single table in the specified keyspace.
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/tableName'
      responses:
        "204":
          $ref: '#/components/responses/GENERAL_204'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
  /v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}/columns:
    get:
      tags:
      - schemas
      summary: Get all columns
      description: Return all columns for a specified table.
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/raw'
      - $ref: '#/components/parameters/tableName'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ColumnDefinition'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "404":
          $ref: '#/components/responses/GENERAL_404'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
    post:
      tags:
      - schemas
      summary: Create a column
      description: Add a single column to a table.
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/tableName'
      requestBody:
        description: Column definition as JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ColumnDefinition'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: '#/components/responses/GENERAL_400'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
  /v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}/columns/{columnName}:
    get:
      tags:
      - schemas
      summary: Get a column
      description: Return a single column specification in a specific table.
      parameters:
      - name: columnName
        in: path
        required: true
        schema:
          pattern: \S
          type: string
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/raw'
      - $ref: '#/components/parameters/tableName'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColumnDefinition'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "404":
          $ref: '#/components/responses/GENERAL_404'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
    put:
      tags:
      - schemas
      summary: Update a column
      description: Update a single column in a specific table
      parameters:
      - name: columnName
        in: path
        required: true
        schema:
          pattern: \S
          type: string
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/tableName'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ColumnDefinition'
      responses:
        "200":
          description: Resource updated
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: '#/components/responses/GENERAL_400'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "404":
          $ref: '#/components/responses/GENERAL_404'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
    delete:
      tags:
      - schemas
      summary: Delete a column
      description: Delete a single column in a specific table.
      parameters:
      - name: columnName
        in: path
        required: true
        schema:
          pattern: \S
          type: string
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/tableName'
      responses:
        "204":
          $ref: '#/components/responses/GENERAL_204'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
  /v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}/indexes:
    get:
      tags:
      - schemas
      summary: Get all indexes for a given table
      description: Get all indexes for a given table
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/tableName'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: '#/components/responses/GENERAL_400'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
    post:
      tags:
      - schemas
      summary: Add an index to a table's column
      description: Add an index to a single column of a table.
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/tableName'
      requestBody:
        description: Index definition as JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexAddRequest'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: '#/components/responses/GENERAL_400'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
  /v2/schemas/keyspaces/{keyspaceName}/tables/{tableName}/indexes/{indexName}:
    delete:
      tags:
      - schemas
      summary: Drop an index from keyspace
      description: Drop an index
      parameters:
      - name: indexName
        in: path
        required: true
        schema:
          pattern: \S
          type: string
      - name: If the index doesn't exist drop will throw an error unless this query
          param is set to true
        in: query
        schema:
          type: boolean
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/tableName'
      responses:
        "204":
          $ref: '#/components/responses/GENERAL_204'
        "400":
          $ref: '#/components/responses/GENERAL_400'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
  /v2/schemas/keyspaces/{keyspaceName}/types:
    get:
      tags:
      - schemas
      summary: 'Get all user defined types (UDT). '
      description: Retrieve all user defined types (UDT) in a specific keyspace.
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/raw'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDefinedType'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "404":
          $ref: '#/components/responses/GENERAL_404'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
    put:
      tags:
      - schemas
      summary: Update an User Defined type (UDT)
      description: Update an user defined type (UDT) adding or renaming fields.
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      requestBody:
        description: Type definition as JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDefinedTypeUpdate'
        required: true
      responses:
        "204":
          $ref: '#/components/responses/GENERAL_204'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
    post:
      tags:
      - schemas
      summary: Create an user defined type (UDT)
      description: Add an user defined type (udt) in a specific keyspace.
      parameters:
      - $ref: '#/components/parameters/keyspaceName'
      requestBody:
        description: Type definition as JSON
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: '#/components/responses/GENERAL_400'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
  /v2/schemas/keyspaces/{keyspaceName}/types/{typeName}:
    get:
      tags:
      - schemas
      summary: Get an user defined type (UDT) from its identifier
      description: Retrieve data for a single table in a specific keyspace
      parameters:
      - name: typeName
        in: path
        description: Name of the type to find
        required: true
        schema:
          pattern: \S
          type: string
      - $ref: '#/components/parameters/keyspaceName'
      - $ref: '#/components/parameters/raw'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDefinedType'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "404":
          $ref: '#/components/responses/GENERAL_404'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
    delete:
      tags:
      - schemas
      summary: Delete an User Defined type (UDT)
      description: Delete a single user defined type (UDT) in the specified keyspace.
      parameters:
      - name: typeName
        in: path
        description: Name of the type to delete
        required: true
        schema:
          pattern: \S
          type: string
      - $ref: '#/components/parameters/keyspaceName'
      responses:
        "204":
          $ref: '#/components/responses/GENERAL_204'
        "401":
          $ref: '#/components/responses/GENERAL_401'
        "500":
          $ref: '#/components/responses/GENERAL_500'
      security:
      - Token: []
components:
  schemas:
    ApiError:
      type: object
      properties:
        description:
          description: A human readable description of the error state.
          type: string
          example: "Could not create collection `custom-users`, it has invalid characters.\
            \ Valid characters are alphanumeric and underscores."
        code:
          format: int32
          description: The internal number referencing the error state.
          type: integer
          example: 22000
        grpcStatus:
          description: The gRPC response status in case a gRPC request to the datastore
            failed.
          type: string
          example: ABORTED
          nullable: true
    ClusteringExpression:
      required:
      - column
      - order
      type: object
      properties:
        column:
          description: The name of the column to order by
          type: string
        order:
          description: The clustering order
          enum:
          - ASC
          - DESC
          type: string
    CollectionIndexingType:
      enum:
      - KEYS
      - VALUES
      - ENTRIES
      - FULL
      type: string
    ColumnDefinition:
      required:
      - name
      - typeDefinition
      type: object
      properties:
        name:
          description: "Name for the column, which must be unique."
          pattern: \S
          type: string
          example: emailaddress
        typeDefinition:
          description: The type of data allowed in the column.
          type: string
          example: text
        static:
          description: Denotes whether the column is shared by all rows of a partition.
          default: false
          type: boolean
    Datacenter:
      required:
      - name
      - replicas
      type: object
      properties:
        name:
          description: The name of the datacenter.
          type: string
        replicas:
          format: int32
          description: "The number of replicas in the datacenter. In other words,\
            \ the number of copies of each row in the datacenter."
          type: integer
    IndexAddRequest:
      required:
      - column
      type: object
      properties:
        column:
          description: Column name
          pattern: \S
          type: string
        name:
          description: "Optional index name. If no name is specified, Cassandra names\
            \ the index: table_name_column_name_idx."
          type: string
        type:
          description: A custom index class name or classpath.
          type: string
        kind:
          description: "The kind (ENTRIES, KEY, VALUES, FULL) of an index"
          type: string
          allOf:
          - $ref: '#/components/schemas/CollectionIndexingType'
        options:
          description: Options passed to a custom index
          type: object
          additionalProperties:
            type: string
        ifNotExists:
          description: Determines whether to create a new index if an index with the
            same name exists. Attempting to create an existing index returns an error
            unless this option is true.
          type: boolean
    MultivaluedMapStringString:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    PathSegment:
      type: object
      properties:
        path:
          type: string
        matrixParameters:
          $ref: '#/components/schemas/MultivaluedMapStringString'
    PrimaryKey:
      description: "Defines a column list for the primary key. Can be either a single\
        \ column, compound primary key, or composite partition key. Provide multiple\
        \ columns for the partition key to define a composite partition key."
      required:
      - partitionKey
      type: object
      properties:
        partitionKey:
          description: Name(s) of the column(s) that constitute the partition key.
          type: array
          items:
            type: string
        clusteringKey:
          description: Name(s) of the column(s) that constitute the clustering key.
          type: array
          items:
            type: string
    RESTResponseWrapper:
      type: object
      properties:
        data:
          description: Response data returned by the request.
          type: object
          nullable: false
    RowsResponse:
      type: object
      properties:
        count:
          format: int32
          description: The count of records returned.
          type: integer
        pageState:
          description: A string representing the paging state to be used on future
            paging requests.
          type: string
          nullable: true
        data:
          description: The rows returned by the request.
          type: array
          items:
            type: object
            additionalProperties:
              type: object
    Sgv2Keyspace:
      required:
      - name
      type: object
      properties:
        name:
          description: description name of the keyspace.
          type: string
        datacenters:
          description: The datacenters within a keyspace. Only applies for those keyspaces
            created with NetworkTopologyStrategy.
          type: array
          items:
            $ref: '#/components/schemas/Datacenter'
    TableAdd:
      description: Definition of a Table to add.
      required:
      - name
      type: object
      properties:
        name:
          description: The name of the table to add.
          pattern: \S
          type: string
          example: cycling_events
        primaryKey:
          description: "The primary key definition of the table, consisting of partition\
            \ and clustering keys."
          type: object
          allOf:
          - $ref: '#/components/schemas/PrimaryKey'
        columnDefinitions:
          description: Definition of columns that belong to the table to be added.
          type: array
          items:
            $ref: '#/components/schemas/ColumnDefinition'
        ifNotExists:
          description: Determines whether to create a new table if a table with the
            same name exists. Attempting to create an existing table returns an error
            unless this option is true.
          type: boolean
        tableOptions:
          description: The set of table options to apply to the table when creating.
          type: object
          allOf:
          - $ref: '#/components/schemas/TableOptions'
    TableOptions:
      type: object
      properties:
        defaultTimeToLive:
          format: int32
          description: "Defines the Time To Live (TTL), which determines the time\
            \ period (in seconds) to expire data. If the value is >0, TTL is enabled\
            \ for the entire table and an expiration timestamp is added to each column.\
            \ The maximum value is 630720000 (20 years). A new TTL timestamp is calculated\
            \ each time the data is updated and the row is removed after the data\
            \ expires."
          type: integer
        clusteringExpression:
          description: Order rows storage to make use of the on-disk sorting of columns.
            Specifying order can make query results more efficient. Defaults to ascending
            if not provided.
          type: array
          items:
            $ref: '#/components/schemas/ClusteringExpression'
    TableResponse:
      description: A description of a Table
      type: object
      properties:
        name:
          description: The name of the table.
          type: string
          example: cycling_events
          nullable: false
        keyspace:
          description: Name of the keyspace the table belongs.
          type: string
          example: cycling
          nullable: false
        columnDefinitions:
          description: Definition of columns within the table.
          type: array
          items:
            $ref: '#/components/schemas/ColumnDefinition'
          nullable: false
        primaryKey:
          description: The definition of the partition and clustering keys that make
            up the primary key.
          type: object
          allOf:
          - $ref: '#/components/schemas/PrimaryKey'
        tableOptions:
          description: Table options that are applied to the table.
          type: object
          allOf:
          - $ref: '#/components/schemas/TableOptions'
    UserDefinedType:
      type: object
      properties:
        name:
          description: The name of the user defined type.
          type: string
        keyspace:
          description: Name of the keyspace the user defined type belongs.
          type: string
        fields:
          description: Definition of columns within the user defined type.
          type: array
          items:
            $ref: '#/components/schemas/UserDefinedTypeField'
    UserDefinedTypeAdd:
      required:
      - name
      - fields
      type: object
      properties:
        name:
          description: User Defined Type name
          minLength: 1
          type: string
        fields:
          description: User Defined Type fields
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/UserDefinedTypeField'
        ifNotExists:
          description: Determines whether to create a new UDT if an UDT with the same
            name exists. Attempting to create an existing UDT returns an error unless
            this option is true.
          type: boolean
    UserDefinedTypeField:
      required:
      - name
      - typeDefinition
      type: object
      properties:
        name:
          description: "Name for the type, which must be unique."
          type: string
          example: emailaddress
        typeDefinition:
          description: "A valid type of data (e.g, text, int, etc) allowed in the\
            \ type."
          type: string
          example: text
    UserDefinedTypeFieldRename:
      required:
      - from
      - to
      type: object
      properties:
        from:
          description: User Defined Type's old field name
          minLength: 1
          type: string
        to:
          description: User Defined Type's new field name
          minLength: 1
          type: string
    UserDefinedTypeUpdate:
      required:
      - name
      type: object
      properties:
        name:
          description: User Defined Type name
          pattern: \S
          type: string
        addFields:
          description: User Defined Type fields to add
          type: array
          items:
            $ref: '#/components/schemas/UserDefinedTypeField'
        renameFields:
          description: User Defined Type fields to rename
          type: array
          items:
            $ref: '#/components/schemas/UserDefinedTypeFieldRename'
  responses:
    GENERAL_204:
      description: No content
    GENERAL_400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            Generic bad request:
              $ref: '#/components/examples/Generic bad request'
    GENERAL_401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            Unauthorized:
              $ref: '#/components/examples/Unauthorized'
    GENERAL_404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    GENERAL_500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            Server-side error:
              $ref: '#/components/examples/Server-side error'
  parameters:
    fields:
      name: fields
      in: query
      description: Comma delimited list of keys to include
      required: false
      schema:
        type: string
      example: "name,title"
    keyspaceName:
      name: keyspaceName
      in: path
      description: Name of the keyspace to use for the request
      required: true
      schema:
        type: string
      example: cycling
    keyspaceQP:
      name: keyspaceQP
      in: query
      description: Name of the keyspace to use for the request
      required: false
      schema:
        type: string
      example: cycling
    page-size:
      name: page-size
      in: query
      description: Restrict the number of returned items
      required: false
      schema:
        format: int32
        type: integer
      example: 10
    page-state:
      name: page-state
      in: query
      description: "Cassandra page state, used for pagination on consecutive requests"
      required: false
      schema:
        type: string
    primaryKey:
      name: primaryKey
      in: path
      description: "Value from the primary key column for the table. Define composite\
        \ keys by separating values with slashes (`val1/val2...`) in the order they\
        \ were defined. </br>For example, if the composite key was defined as `PRIMARY\
        \ KEY(race_year, race_name)` then the primary key in the path would be `race_year/race_name` "
      required: true
      schema:
        type: array
        items:
          type: string
    raw:
      name: raw
      in: query
      description: Whether to 'unwrap' results object (omit wrapper)
      required: false
      schema:
        type: boolean
    sort:
      name: sort
      in: query
      description: JSON Object with key(s) to sort results by as keys and 'ASC' or
        'DESC' as value
      required: false
      schema:
        type: object
      examples:
        sort.single:
          summary: Single sorting column
          value:
            count: DESC
    tableName:
      name: tableName
      in: path
      description: Name of the table to use for the request
      required: true
      schema:
        type: string
      example: cycling_events
  examples:
    Generic bad request:
      value:
        code: 400
        description: "Request invalid: payload not provided."
    Server-side error:
      value:
        code: 500
        description: Internal server error.
    Unauthorized:
      value:
        code: 401
        description: Unauthorized operation.
        grpcStatus: PERMISSION_DENIED
  securitySchemes:
    Token:
      type: apiKey
      name: X-Cassandra-Token
      in: header
