openapi: 3.0.1
info:
  title: Stargate REST API reference
  description: "The Stargate REST API provides CRUD operations on table data managed by Stargate. Keep in mind that you will need information for the server ({databaseId} and {region}) for all of these operations."
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 2.0.0
servers:
  - url: https://localhost:8082
    description: "Change the port if required."
externalDocs:
  description: Reference Document
  url: http://shorturl.at/hnqIQ
tags:
  - name: Auth
    description: "The Auth API allows you to create an authorization token to connect to your database."
  - name: Schemas
    description: "The Schema API allows you to interact with keyspaces and tables in your database"
  - name: Data
    description: "The Data API allows you to add, update, and delete rows in your database"
paths:
  /v1/auth:
    servers:
      - url: https://localhost:8081
    post:
      tags:
        - Auth
      summary: Create an authorization token
      description: Create an authorization token.
      operationId: createToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credentials"
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
  /v2/schemas/keyspaces:
    get:
      tags:
        - Schemas
      summary: Get all keyspaces
      description: "Retrieve all available keyspaces in the specific database."
      operationId: getAllKeyspaces
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/raw"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Keyspace"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
    post:
      tags:
        - Schemas
      summary: Create a keyspace
      operationId: createKeyspace
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Keyspace"
      responses:
        201:
          description: resource created
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"
  /v2/schemas/keyspaces/{keyspace-id}:
    get:
      tags:
        - Schemas
      summary: Get a keyspace using the {keyspace-id}
      operationId: getKeyspace
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/raw"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Keyspace"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Schemas
      summary: Delete a keyspace
      operationId: deleteKeyspace
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
      responses:
        204:
          description: No Content
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
  /v2/schemas/keyspaces/{keyspace-id}/tables:
    post:
      tags:
        - Schemas
      summary: Create a table
      operationId: createTable
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TableAdd"
      responses:
        201:
          description: resource created
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"
    get:
      tags:
        - Schemas
      summary: Get all tables
      operationId: getTables
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/raw"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Table"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /v2/schemas/keyspaces/{keyspace-id}/tables/{table-id}:
    get:
      tags:
        - Schemas
      summary: Get a table
      operationId: getTable
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/table-id"
        - $ref: "#/components/parameters/raw"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Table"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    put:
      tags:
        - Schemas
      summary: Replace a table definition (table options only)
      operationId: replaceTable
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/table-id"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TableAdd"
      responses:
        200:
          description: resource updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Schemas
      summary: Delete a table
      operationId: deleteTable
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/table-id"
      responses:
        204:
          description: No Content
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
  /v2/schemas/keyspaces/{keyspace-id}/tables/{table-id}/columns:
    get:
      tags:
        - Schemas
      summary: List columns
      operationId: getColumns
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/table-id"
        - $ref: "#/components/parameters/raw"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ColumnDefinition"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    post:
      tags:
        - Schemas
      summary: Create a column
      operationId: createColumn
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/table-id"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ColumnDefinition"
      responses:
        201:
          description: resource created
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"
  /v2/schemas/keyspaces/{keyspace-id}/tables/{table-id}/columns/{column-id}:
    get:
      tags:
        - Schemas
      summary: Get a column
      operationId: getColumn
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/table-id"
        - $ref: "#/components/parameters/column-id"
        - $ref: "#/components/parameters/raw"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ColumnDefinition"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    put:
      tags:
        - Schemas
      summary: Replace a column definition
      operationId: replaceColumn
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/table-id"
        - $ref: "#/components/parameters/column-id"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ColumnDefinition"
      responses:
        200:
          description: resource updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Schemas
      summary: Delete a column
      operationId: deleteColumn
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/table-id"
        - $ref: "#/components/parameters/column-id"
      responses:
        204:
          description: No Content
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
  /v2/schemas/keyspaces/{keyspace-id}/tables/{table-id}/indexes:
    get:
      tags:
        - Schemas
      summary: List indexes for a given table
      operationId: getIndexes
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/table-id"
        - $ref: "#/components/parameters/raw"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IndexResponse"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    post:
      tags:
        - Schemas
      summary: Create an index
      operationId: createIndex
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/table-id"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndexDefinition"
      responses:
        201:
          description: resource created
          content:
            application/json:
              schema:
                type: string
                example: {"success": true}
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"
  /v2/schemas/keyspaces/{keyspace-id}/tables/{table-id}/indexes/{index-id}:
    delete:
      tags:
        - Schemas
      summary: Delete an index
      operationId: deleteIndex
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/table-id"
        - $ref: "#/components/parameters/index-id"
      responses:
        204:
          description: No Content
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
  /v2/keyspaces/{keyspace-id}/{table-id}:
    get:
      tags:
        - Data
      summary: Search a table
      operationId: searchTable
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/table-id"
        - $ref: "#/components/parameters/where"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/page-size"
        - $ref: "#/components/parameters/page-state"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/raw"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      additionalProperties:
                        type: string
                  count:
                    type: integer
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
# ERROR Add Rows isn't working
    post:
      tags:
        - Data
      summary: Add rows
      operationId: addRows
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/table-id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
              example:
                pk: e73c77ec-002d-457a-8b65-8ce7cfb15fc7
                age: "30"
                name: John
      responses:
        201:
          description: resource created
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                example:
                  pk: e73c77ec-002d-457a-8b65-8ce7cfb15fc7
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        409:
          $ref: "#/components/responses/409"
        500:
          $ref: "#/components/responses/500"
  /v2/keyspaces/{keyspace-id}/{table-id}/{primary-key}:
    get:
      tags:
        - Data
      summary: Get a row by primary key
      operationId: getRows
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/table-id"
        - $ref: "#/components/parameters/primary-key"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/page-size"
        - $ref: "#/components/parameters/page-state"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/raw"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      additionalProperties:
                        type: string
                  count:
                    type: integer
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
    put:
      tags:
        - Data
      summary: Replace a row by primary key
      operationId: replaceRows
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/table-id"
        - $ref: "#/components/parameters/primary-key"
        - $ref: "#/components/parameters/raw"
      requestBody:
        description: document
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
              example:
                pk: e73c77ec-002d-457a-8b65-8ce7cfb15fc7
                age: "30"
                name: John
      responses:
        200:
          description: resource updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    additionalProperties:
                      type: string
                    example:
                      pk: e73c77ec-002d-457a-8b65-8ce7cfb15fc7
                      age: "30"
                      name: John
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
    patch:
      tags:
        - Data
      summary: Update a row by primary key
      operationId: updateRows
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/table-id"
        - $ref: "#/components/parameters/primary-key"
        - $ref: "#/components/parameters/raw"
      requestBody:
        description: document
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
              example:
                pk: e73c77ec-002d-457a-8b65-8ce7cfb15fc7
                age: "30"
                name: John
      responses:
        200:
          description: resource updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    additionalProperties:
                      type: string
                    example:
                      pk: e73c77ec-002d-457a-8b65-8ce7cfb15fc7
                      age: "30"
                      name: John
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Data
      summary: Delete a row by primary key
      operationId: deleteRows
      parameters:
        - $ref: "#/components/parameters/X-Cassandra-Token"
        - $ref: "#/components/parameters/keyspace-id"
        - $ref: "#/components/parameters/table-id"
        - $ref: "#/components/parameters/primary-key"
      responses:
        204:
          description: No Content
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
components:
  parameters:
    X-Cassandra-Token:
      name: X-Cassandra-Token
      in: header
      required: true
      description: "The token returned from the authorization endpoint. Use this token in each request."
      schema:
        type: string
    raw:
      name: raw
      in: query
      description: Unwrap results.
      required: false
      schema:
        type: boolean
        default: false
    keyspace-id:
      name: keyspace-id
      in: path
      description: keyspace name
      required: true
      schema:
        type: string
    table-id:
      name: table-id
      in: path
      description: table name
      required: true
      schema:
        type: string
    column-id:
      name: column-id
      in: path
      description: column name
      required: true
      schema:
        type: string
    index-id:
      name: index-id
      in: path
      description: index name
      required: true
      schema:
        type: string
    primary-key:
      name: primary-key
      in: path
      required: true
      description: |
        Value from the primary key column for the table. Define composite keys by separating values with
        slashes (`val1/val2...`) in the order they were defined. </br> For example, if the composite key
        was defined as `PRIMARY KEY(race_year, race_name)` then the primary key in the path would be
        `race_year/race_name`
      schema:
        type: string
    fields:
      name: fields
      in: query
      description: URL escaped, comma delimited list of keys to include
      schema:
        type: string
    sort:
      name: sort
      in: query
      description: keys to sort by
      schema:
        $ref: '#/components/schemas/Sort'
    page-state:
      name: page-state
      in: query
      description: move the cursor to a particular result
      schema:
        type: string
    page-size:
      name: page-size
      description: restrict the number of returned items
      in: query
      schema:
        type: integer
        format: int32
    where:
      name: where
      in: query
      description: |
        URL escaped JSON query using the following keys:

        | Key | Operation |
        |---|---|
        | $lt | Less Than |
        | $lte | Less Than Or Equal To |
        | $gt | Greater Than |
        | $gte | Greater Than Or Equal To |
        | $ne | Not Equal To |
        | $in | Contained In |
        | $exists | A value is set for the key |

      schema:
        type: object
  responses:
    404:
      description: Not Found
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
    400:
      description: Bad Request
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
    401:
      description: Unauthorized
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
    409:
      description: Conflict
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
    500:
      description: Internal server error
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      description: A description of an error state
      properties:
        description:
          type: string
          description: A human readable description of the error state
          example: Invalid STRING constant (8be6d514-3436-4e04-a5fc-0ffbefa4c1fe) for
            "id" of type uuid.
        code:
          type: integer
          description: The code referencing the error state
          format: int32
          example: 400
        internalTxId:
          type: string
    ResponseWrapper:
      type: object
      properties:
        data:
          type: object
          properties: {}
          description: Response data returned by the request.
    GetResponseWrapper:
      type: object
      properties:
        count:
          type: integer
          description: The count of records returned
          format: int32
        pageState:
          type: string
          description: A string representing the paging state to be used on future
            paging requests.
        data:
          type: object
          properties: {}
          description: The data returned by the request.
    Credentials:
      type: object
      required:
        - username
        - password
      description: User credentials for authenticating
      properties:
        username:
          type: string
          description: Username
          example: cassandra
        password:
          type: string
          description: Password
          example: cassandra
    AuthTokenResponse:
      type: object
      properties:
        authToken:
          type: string
          example: "5c90f769-8784-499c-83f7-b764822255f1"
    Datacenter:
      type: object
      required:
        - name
        - replicas
      properties:
        name:
          type: string
          description: The name of the datacenter.
          example: DC1
        replicas:
          type: integer
          description: "The number of replicas in the datacenter. In other words, the
            number of copies of each row in the datacenter."
          format: int32
          example: 2
    Keyspace:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the keyspace.
          example: users_keyspace
        datacenters:
          type: array
          description: "The datacenters within a keyspace. Only applies for those keyspaces
            created with NetworkTopologyStrategy."
          items:
            $ref: '#/components/schemas/Datacenter'

    Table:
      type: object
      required:
        - name
        - columnDefinitions
        - primaryKey
      properties:
        name:
          type: string
          description: The name of the table.
          example: users
        keyspace:
          type: string
          description: The name of the keyspace.
          example: users_keyspace
        columnDefinitions:
          type: array
          description: An array of column names with data type.
          items:
            $ref: '#/components/schemas/ColumnDefinition'
        primaryKey:
          $ref: '#/components/schemas/PrimaryKey'
        tableOptions:
          $ref: '#/components/schemas/TableOptions'
    TableAdd:
      type: object
      required:
        - name
        - columnDefinitions
        - primaryKey
      properties:
        name:
          type: string
          description: Name of the table.
          example: users
        ifNotExists:
          type: boolean
          description: "Determines whether to create a new table if a table with
            the same name exists. Attempting to create an existing table returns
            an error unless this option is true."
          default: false
          example: true
        columnDefinitions:
          type: array
          description: Definition of columns that belong to the table to be added.
          items:
            $ref: '#/components/schemas/ColumnDefinition'
        primaryKey:
          $ref: '#/components/schemas/PrimaryKey'
        tableOptions:
          $ref: '#/components/schemas/TableOptions'
    ColumnDefinition:
      type: object
      required:
        - name
        - typeDefinition
      properties:
        name:
          type: string
          description: "Name for the column, which must be unique."
          example: emailaddress
        typeDefinition:
          type: string
          description: "The type of data allowed in the column."
          example: text
          enum:
            - ascii
            - text
            - varchar
            - tinyint
            - smallint
            - int
            - bigint
            - varint
            - decimal
            - float
            - double
            - date
            - DateRangeType
            - duration
            - time
            - timestamp
            - uuid
            - timeuuid
            - blob
            - boolean
            - counter
            - inet
            - PointType
            - LineStringType
            - PolygonType
            - frozen
            - list
            - map
            - set
            - tuple
        static:
          type: boolean
          default: false
          description: "Denotes whether the column is shared by all rows of a partition."
    PrimaryKey:
      type: object
      required:
        - partitionKey
      description: "Defines a column list for the primary key. Can be either a single
        column, compound primary key, or composite partition key. Provide
        multiple columns for the partition key to define a composite partition
        key."
      properties:
        partitionKey:
          type: array
          description: "Name of the column or columns that constitute the partition key."
          minItems: 1
          items:
            type: string
            example: emailaddress
        clusteringKey:
          type: array
          description: "Name of the column or columns that constitute the clustering key."
          items:
            type: string
            example: age
    IndexDefinition:
      type: object
      required:
        - column
      properties:
        name:
          type: string
          description: "Optional name for the index, which must be unique.
            If no name is specified, the index is named as follows:
            tablename_columnname_idx."
          example: age_idx
        column:
          type: string
          description: "Column for which index will be created."
          example: age
        type:
          type: string
          description: "Type of index, defined with a custom index class name or classpath.
            Secondary index is default, no type entered"
          default: ""
          enum:
            - "org.apache.cassandra.index.sasi.SASIIndex"
            - "StorageAttachedIndex"
        options:
          type: object
          additionalProperties:
            type: string
            description: "Options passed to a custom index."
        kind:
          type: string
          description: "Index kind for collections."
          default: VALUES
          example: "KEYS"
          enum:
            - FULL
            - KEYS
            - VALUES
            - ENTRIES
        ifNotExists:
          type: boolean
          description: "Determines creation of a new index, if an index with the
            same name exists. If an index exists, and this option is set to true,
            an error is returned."
          default: false
          example: true
    IndexResponse:
      type: array
      description: The data returned by the index fetch.
      items:
        properties:
          keyspace_name:
            type: string
            example: users_keyspace
          options:
            type: array
            items:
              $ref: '#/components/schemas/IndexOptions'
          table_name:
            type: string
            example: users
          index_name:
            type: string
            example: fav_books_idx
          kind:
            type: string
            example: COMPOSITES
    IndexOptions:
      type: object
      properties:
        key:
          type: string
          example: target
        value:
          type: string
          example: values(favorite_books)
    TableOptions:
      type: object
      properties:
        defaultTimeToLive:
          type: integer
          description: "Defines the Time To Live (TTL), which determines the
            time period (in seconds) to expire data. If the value is >0, TTL is
            enabled for the entire table and an expiration timestamp is added to
            each column. The maximum value is 630720000 (20 years). A new TTL
            timestamp is calculated each time the data is updated and the row is
            removed after the data expires."
          default: 0
        clusteringExpression:
          type: array
          items:
            $ref: '#/components/schemas/ClusteringExpression'
    ClusteringExpression:
      type: object
      required:
        - column
        - order
      description: "Order rows storage to make use of the on-disk sorting of columns.
        Specifying order can make query results more efficient."
      properties:
        column:
          type: string
          description: The name of the column to order by.
          example: age
        order:
          type: string
          description: The clustering order.
          example: ASC
          enum:
            - ASC
            - DESC
    Sort:
      type: object
      additionalProperties:
        type: string
        enum:
            - asc
            - desc
      example:
        firstName: asc
        age: desc
