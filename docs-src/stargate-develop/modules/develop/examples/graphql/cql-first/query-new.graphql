type Query {
  # books by partition key
  bookByTitle(title: String!): [Book]
  # books by partition key + clustering column (primary key)
  bookByTitleAndIsbn( title: String!, isbn: String): [Book]
  # books by indexed column author
  bookByAuthor(
    author: String @cql_where(field: "author", predicate: CONTAINS)
  ): [Book]
  # books by partition key + indexed column author
  bookByTitleAndAuthor(title: String!, author: String @cql_where(field: "author", predicate: CONTAINS)
  ): [Book]
  # books by isbn (object: BookI)
  bookIByIsbn(isbn: String): [BookI]
  # books with paging state, paging size = 10
  booksWithPaging(
    title: String!,
    pagingState: String @cql_pagingState
  ): SelectBookResult @cql_select(pageSize: 10)
  # books by partition key WHERE title is IN a list
  booksIn(title: [String] @cql_where(field: "title", predicate: IN)
  ): [Book]
  # books by author WHERE author is CONTAINED in the author array (list)
  booksContainAuthor(author: String @cql_where(field: "author", predicate: CONTAINS)
  ): [Book]
  bookGT(
    title: String
    isbn: String @cql_where(field: "isbn", predicate: GT)
  ): [Book]
  bookLT(
    title: String
    isbn: String @cql_where(field: "isbn", predicate: LT)
  ): [Book]

  # readers by partition key
  readerByName(name:String!): [Reader]
  # readers by partition key + clustering column (primary key)
  readerByNameAndUserid(name:String!, user_id:Uuid): [Reader]
  # reader by user_id (object: ReaderU)
  readerUByUserid(user_id: Uuid!): [ReaderU]
  # reader by review that CONTAINS information
  #readerCONTAINS(
  #  reviews: ReviewInput! @cql_where(field: "reviews", predicate: CONTAINS)
  #): [Reader]
  #readerGT(
  #  name: String!,
  #  user_id: Uuid! @cql_where(field: "user_id", predicate:GT)
  #): [Reader]

  #libCollByType(type: String!): [LibCollection]
  # lib collection by primary key (composite)
  libCollByTypeAndLibid(type: String!, lib_id: Int!): [LibCollection]
  # lib collection by indexed column lib_name
  #libCollByName(lib_name: String): [LibCollection]
  # lib collection by type IN and lib_id IN
  #libCollIn(
  #  type: [String!] @cql_where(field: "type", predicate: IN)
  #  lib_id: [Int!] @cql_where(field: "lib_id", predicate: IN)
  #): [LibCollection]

  #reviewsByBook(
  # title: ReaderInput! @cql_where(field: "reviews", predicate: CONTAINS)
  #): [Reader]
  #reviewIt(contains: String): [ReviewResult!]
}
